import streamlit as st
from streamlit_option_menu import option_menu
import plotly.graph_objs as go
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

st.set_page_config(layout="wide")

df = pd.DataFrame({"tahun": [2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025
], "embarkasi": ["Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Solo", "Surabaya", "Banjarmasin", "Balikpapan", "Makassar", "Lombok", "Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Solo", "Surabaya", "Banjarmasin", "Balikpapan", "Makassar", "Lombok", "Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Solo", "Surabaya", "Balikpapan", "Banjarmasin", "Makassar", "Lombok", "Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Solo", "Surabaya", "Balikpapan", "Banjarmasin", "Makassar", "Jakarta", "Lombok", "Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Jakarta", "Solo", "Surabaya", "Balikpapan", "Banjarmasin", "Makassar", "Lombok", "Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Jakarta", "Solo", "Surabaya", "Balikpapan", "Banjarmasin", "Makassar", "Lombok", "Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Jakarta", "Solo", "Surabaya", "Balikpapan", "Banjarmasin", "Makassar", "Lombok", "Kertajati", "Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Solo", "Surabaya", "Balikpapan", "Banjarmasin", "Makassar", "Lombok", "Kertajati", "Aceh", "Medan", "Batam", "Padang", "Palembang", "Jakarta", "Solo", "Surabaya", "Balikpapan", "Banjarmasin", "Makassar", "Lombok", "Kertajati"
], "kurs_usd": [12500, 12500, 12500, 12500, 12500, 12500, 12500, 12500, 12500, 12500, 12500, 12500, 13400, 13400, 13400, 13400, 13400, 13400, 13400, 13400, 13400, 13400, 13400, 13400, 13331, 13331, 13331, 13331, 13331, 13331, 13331, 13331, 13331, 13331, 13331, 13331, 13900, 13900, 13900, 13900, 13900, 13900, 13900, 13900, 13900, 13900, 13900, 13900, 13900, 14200, 14200, 14200, 14200, 14200, 14200, 14200, 14200, 14200, 14200, 14200, 14200, 14200, 14425, 14425, 14425, 14425, 14425, 14425, 14425, 14425, 14425, 14425, 14425, 14425, 14425, 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
], "kurs_sar": [3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3441, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3786.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 3846.67, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67, 4266.67
], "bpih": [54082500, 54120000, 56020000, 56082500, 56857500, 56895000, 58682500, 59082500, 60620000, 60645000, 62257500, 61095000, 56517461, 57072827, 57513606, 57919099, 57937702, 59527046, 60241414, 60341414, 62983508, 62983508, 64305808, 63128961, 57940900, 58607400, 59025650, 59740450, 59858750, 61206780, 62564700, 62566250, 64939150, 64605900, 65872250, 65139100, 64810010, 65560375, 66176450, 66788245, 67249675, 68252190, 69653275, 69811845, 72245445, 71877084, 73227741, 68252190, 72518305, 64805318.2769, 65654683.2769, 66230758.2769, 66842373.2769, 67353883.2769, 68911588.2769, 68911588.2769, 70353583.2769, 70511253.2769, 72183653.2769, 71809392.2769, 73132049.2769, 72378713.2769, 93570857, 94303073, 97596009, 95321480, 97716009, 97796009, 97796009, 98172721, 100496009, 99272590, 99145290, 100596506, 99557741, 84602294.26, 85439589.26, 87667245.26, 86282787.26, 88242945.26, 91575945.26, 91575945.26, 90131918.26, 96166395.26, 91030138.26, 90990994.26, 92420640.26, 91506286.26, 93075795.26, 87359984, 88509253, 91198048, 89103471, 91307248, 95862448, 95926122, 97890448, 93874558, 93835219, 97609469, 95995002, 95862448, 80900841, 81955039, 88310259, 85760259, 88390259, 92854259, 89457009, 94934259, 91213929, 93310259, 91649429, 90743309, 92854259
], "bipih": [30012500, 30050000, 31950000, 32012500, 32787500, 32825000, 34612500, 35012500, 36550000, 36575000, 38187500, 37025000, 31117461, 31672827, 32113606, 32519099, 32537702, 34127046, 34841414, 34941414, 37583508, 37583508, 38905808, 37728961, 31040900, 31707400, 32125650, 32840450, 32958750, 34306780, 35664700, 35666250, 38039150, 37705900, 38972250, 38239100, 31090010, 31840375, 32456450, 33068245, 33529675, 34532190, 35933275, 36091845, 38525445, 38157084, 39507741, 34532190, 38798305, 30881010, 31730375, 32306450, 32918065, 33429575, 34987280, 34987280, 36429275, 36586945, 38259345, 37885084, 39207741, 38454405, 35660857, 36393073, 39686009, 37411480, 39806009, 39886009, 39886009, 40262721, 42586009, 41362590, 41235290, 42686506, 41647741, 44364357.26, 45201652.26, 47429308.26, 46044850.26, 48005008.26, 51338008.26, 51338008.26, 49893981.26, 55928458.26, 50792201.26, 50753057.26, 52182703.26, 51268349.26, 52837858.26, 49995870, 51145139, 53833934, 51739357, 53943134, 58498334, 58562008, 60526334, 56510444, 56471105, 60245355, 58630888, 58498334, 46922333, 47976531, 54331751, 51781751, 54411751, 58875751, 55478501, 60955751, 57235421, 59331751, 57670921, 56764801, 58875751
], "nm": [24070000, 24070000, 24070000, 24070000, 24070000, 24070000, 24070000, 24070000, 24070000, 24070000, 24070000, 24070000, 25400000, 25400000, 25400000, 25400000, 25400000, 25400000, 25400000, 25400000, 25400000, 25400000, 25400000, 25400000, 26900000, 26900000, 26900000, 26900000, 26900000, 26900000, 26900000, 26900000, 26900000, 26900000, 26900000, 26900000, 33720000, 33720000, 33720000, 33720000, 33720000, 33720000, 33720000, 33720000, 33720000, 33720000, 33720000, 33720000, 33720000, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 33924308.2769, 57910000, 57910000, 57910000, 57910000, 57910000, 57910000, 57910000, 57910000, 57910000, 57910000, 57910000, 57910000, 57910000, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 40237937, 37364114, 37364114, 37364114, 37364114, 37364114, 37364114, 37364114, 37364114, 37364114, 37364114, 37364114, 37364114, 37364114, 33978508, 33978508, 33978508, 33978508, 33978508, 33978508, 33978508, 33978508, 33978508, 33978508, 33978508, 33978508, 33978508
], "bpih_pesawat": [26825000, 26825000, 26825000, 26825000, 26825000, 26825000, 26825000, 26825000, 26825000, 26825000, 26825000, 26825000, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 30078985, 30078985, 30078985, 30078985, 30078985, 30078985, 30078985, 30078985, 30078985, 30078985, 30078985, 30078985, 30078985, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000
], "bpih_akom_mak": [15000000, 15000000, 15000000, 15000000, 15000000, 15000000, 15000000, 15000000, 15000000, 15000000, 15000000, 15000000, 15586620, 15586620, 15586620, 15586620, 15586620, 15586620, 15586620, 15586620, 15586620, 15586620, 15586620, 15586620, 15618750, 15618750, 15618750, 15618750, 15618750, 15618750, 15618750, 15618750, 15618750, 15618750, 15618750, 15618750, 15886500, 15886500, 15886500, 15886500, 15886500, 15886500, 15886500, 15886500, 15886500, 15886500, 15886500, 15886500, 15886500, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 17694682, 17694682, 17694682, 17694682, 17694682, 17694682, 17694682, 17694682, 17694682, 17694682, 17694682, 17694682, 17694682, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17066680, 17066680, 17066680, 17066680, 17066680, 17066680, 17066680, 17066680, 17066680, 17066680, 17066680, 17066680, 17066680
], "bpih_akom_mad": [2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5283747.4453, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5512000, 5512000, 5512000, 5512000, 5512000, 5512000, 5512000, 5512000, 5512000, 5512000, 5512000, 5512000, 5512000, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75, 5653337.75
], "bpih_lainnya": [13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 13961666.6666667, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 16183888.8333333, 17041878, 17041878, 17041878, 17041878, 17041878, 17041878, 17041878, 17041878, 17041878, 17041878, 17041878, 17041878, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 21289260.3076923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 20215735.6445923, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 45316978.4777769, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 34670525.1171429, 36873648, 36873648, 36873648, 36873648, 36873648, 36873648, 36873648, 36873648, 36873648, 36873648, 36873648, 36873648, 36873648, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462, 33590241.4038462
], "bipih_pesawat": [25000000, 25000000, 25000000, 25000000, 25000000, 25000000, 25000000, 25000000, 25000000, 25000000, 25000000, 25000000, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 25234354, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 26143812, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 27495842, 29555297, 29555297, 29555297, 29555297, 29555297, 29555297, 29555297, 29555297, 29555297, 29555297, 29555297, 29555297, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 29500000, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 32743992, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33427838, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000, 33100000
], "bipih_akom_mak": [3900000, 3900000, 3900000, 3900000, 3900000, 3900000, 3900000, 3900000, 3900000, 3900000, 3900000, 3900000, 4051950, 4051950, 4051950, 4051950, 4051950, 4051950, 4051950, 4051950, 4051950, 4051950, 4051950, 4051950, 3391500, 3391500, 3391500, 3391500, 3391500, 3391500, 3391500, 3391500, 3391500, 3391500, 3391500, 3391500, 2384760, 2384760, 2384760, 2384760, 2384760, 2384760, 2384760, 2384760, 2384760, 2384760, 2384760, 2384760, 2384760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2692669, 2692669, 2692669, 2692669, 2692669, 2692669, 2692669, 2692669, 2692669, 2692669, 2692669, 2692669, 2692669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 17596800, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53, 14758411.53
], "bipih_akom_mad": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 769334, 769334, 769334, 769334, 769334, 769334, 769334, 769334, 769334, 769334, 769334, 769334, 769334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 653534, 653534, 653534, 653534, 653534, 653534, 653534, 653534, 653534, 653534, 653534, 653534, 653534, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75, 4373336.75
], "bipih_living_cost": [5062500, 5062500, 5062500, 5062500, 5062500, 5062500, 5062500, 5062500, 5062500, 5062500, 5062500, 5062500, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5355000, 5680005, 5680005, 5680005, 5680005, 5680005, 5680005, 5680005, 5680005, 5680005, 5680005, 5680005, 5680005, 5680005, 5770005, 5770005, 5770005, 5770005, 5770005, 5770005, 5770005, 5770005, 5770005, 5770005, 5770005, 5770005, 5770005, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3030000, 3120000, 3120000, 3120000, 3120000, 3120000, 3120000, 3120000, 3120000, 3120000, 3120000, 3120000, 3120000, 3120000, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5, 3200002.5
], "bipih_visa": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1154001, 1154001, 1154001, 1154001, 1154001, 1154001, 1154001, 1154001, 1154001, 1154001, 1154001, 1154001, 1154001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1248000, 1248000, 1248000, 1248000, 1248000, 1248000, 1248000, 1248000, 1248000, 1248000, 1248000, 1248000, 1248000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
], "bipih_masyair": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 14038708.26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
], "nm_pesawat": [1825000, 1825000, 1825000, 1825000, 1825000, 1825000, 1825000, 1825000, 1825000, 1825000, 1825000, 1825000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 523688, 523688, 523688, 523688, 523688, 523688, 523688, 523688, 523688, 523688, 523688, 523688, 523688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
], "nm_akom_mak": [11100000, 11100000, 11100000, 11100000, 11100000, 11100000, 11100000, 11100000, 11100000, 11100000, 11100000, 11100000, 11534670, 11534670, 11534670, 11534670, 11534670, 11534670, 11534670, 11534670, 11534670, 11534670, 11534670, 11534670, 12227250, 12227250, 12227250, 12227250, 12227250, 12227250, 12227250, 12227250, 12227250, 12227250, 12227250, 12227250, 13501740, 13501740, 13501740, 13501740, 13501740, 13501740, 13501740, 13501740, 13501740, 13501740, 13501740, 13501740, 13501740, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 14321185.94, 15002013, 15002013, 15002013, 15002013, 15002013, 15002013, 15002013, 15002013, 15002013, 15002013, 15002013, 15002013, 15002013, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 17089200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47, 2308268.47
], "nm_akom_mad": [2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 2250000, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 3034500, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4284000, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4544004, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 4514413.4453, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 5546920, 4858466, 4858466, 4858466, 4858466, 4858466, 4858466, 4858466, 4858466, 4858466, 4858466, 4858466, 4858466, 4858466, 1280001, 1280001, 1280001, 1280001, 1280001, 1280001, 1280001, 1280001, 1280001, 1280001, 1280001, 1280001, 1280001
], "nm_masyair": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 21760112.1229, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 4415001.74, 17753840, 17753840, 17753840, 17753840, 17753840, 17753840, 17753840, 17753840, 17753840, 17753840, 17753840, 17753840, 17753840, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9, 16085345.9
], "nm_lainnya": [8895000, 8895000, 8895000, 8895000, 8895000, 8895000, 8895000, 8895000, 8895000, 8895000, 8895000, 8895000, 10830830, 10830830, 10830830, 10830830, 10830830, 10830830, 10830830, 10830830, 10830830, 10830830, 10830830, 10830830, 11638250, 11638250, 11638250, 11638250, 11638250, 11638250, 11638250, 11638250, 11638250, 11638250, 11638250, 11638250, 15934260, 15934260, 15934260, 15934260, 15934260, 15934260, 15934260, 15934260, 15934260, 15934260, 15934260, 15934260, 15934260, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 14535430.3369, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 16633461.4318, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 13186815.26, 14751808, 14751808, 14751808, 14751808, 14751808, 14751808, 14751808, 14751808, 14751808, 14751808, 14751808, 14751808, 14751808, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63, 14304892.63
]})

tab0, tab1, tab2, tab3 = st.tabs(["Dashboard", "Regional Analysis", "AI Predictions", "Data Documentation"])

tab0.markdown(
    "<h1 style='font-size:25px;'>📊 Data Historis dan Proyeksi BPIH</h1>",
    unsafe_allow_html=True
)
with tab0:
    # ----- Statistik -----
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("🔥 Biaya Haji 2025", "Rp 89.410.259", "-9.5%", border=True, help="tes_tooltip", label_visibility="visible")
    with col2:
        st.metric("📊 CAGR 2015-2025", "5.6%", "", border=True)
    with col3:
        st.metric("🟣 Growth Normal", "8.5%", "", border=True)
    with col4:
        st.metric("📍 Jakarta 2026", "Rp 93.577.403", "Confidence: 90%", border=True)

with tab0:
    # Average BIPIH per year across all embarkasi
    df_avg_year = df.groupby('tahun')[["kurs_usd", "kurs_sar", 'bpih', 'bipih', 'nm', "bpih_pesawat", "bpih_akom_mak", 
                                   "bpih_akom_mad", "bpih_lainnya"]].mean().reset_index()
    cagr_dict = {}
    component_cols = df_avg_year.columns.difference(['bpih', 'tahun'])
    
    for col in component_cols:
        valid_data = df_avg_year[['tahun', col]].dropna()
        valid_data = valid_data[valid_data[col] > 0]
    
        if len(valid_data) < 2:
            cagr_dict[col] = 0.0
            continue
    
        if col == 'bipih_living_cost':
            # Use average annual growth (AAGR)
            growth_rates = valid_data[col].pct_change().dropna()
            avg_growth = growth_rates.mean()
            cagr_dict[col] = avg_growth
        else:
            # Use CAGR
            start_year = int(valid_data.iloc[0]['tahun'])
            end_year = int(valid_data.iloc[-1]['tahun'])
            start_val = valid_data.iloc[0][col]
            end_val = valid_data.iloc[-1][col]
            n_years = end_year - start_year
    
            if n_years > 0 and start_val > 0:
                cagr = (end_val / start_val) ** (1 / n_years) - 1
                cagr_dict[col] = cagr
            else:
                cagr_dict[col] = 0.0
    
    # --- 2. Train multivariate regression model ---
    X_multi = df_avg_year.drop(columns=['bpih', 'tahun'])
    y_multi = df_avg_year['bpih']
    model_multi = LinearRegression().fit(X_multi, y_multi)
    
    # --- 3. Project component values for 2025–2030 ---
    end_year = int(df_avg_year['tahun'].max())
    base_components = df_avg_year[df_avg_year['tahun'] == end_year][component_cols].iloc[0]
    future_years = list(range(end_year + 1, 2031))
    
    projected_components_list = []
    
    for year in future_years:
        years_ahead = year - end_year
        projected_components = {
            col: base_components[col] * ((1 + cagr_dict[col]) ** years_ahead)
            for col in component_cols
        }
        projected_components_list.append((year, projected_components))
    
    # --- 4. Predict BPIH for each projected year ---
    predictions = []
    
    for year, comp_dict in projected_components_list:
        input_df = pd.DataFrame([comp_dict])[X_multi.columns]  # enforce column order
        pred_bpih = model_multi.predict(input_df)[0]
        predictions.append((year, pred_bpih))
    
    # --- 5. Combine into DataFrame and print ---
    df_proj = pd.DataFrame(predictions, columns=['tahun', 'bpih_predicted'])

    # Create the figure
    fig = go.Figure()
    
    # Actual BPIH
    fig.add_trace(go.Scatter(
        x=df_avg_year['tahun'],
        y=df_avg_year['bpih'],
        mode='lines+markers+text',
        name='Actual BPIH',
        text=df_avg_year['bpih'].round(0),
        textposition='top center'
    ))
    
    # Predicted BPIH
    fig.add_trace(go.Scatter(
        x=df_proj['tahun'],
        y=df_proj['bpih_predicted'],
        mode='lines+markers+text',
        name='Predicted BPIH',
        text=df_proj['bpih_predicted'].round(0),
        textposition='top center',
        line=dict(dash='dash')
    ))
    
    # Set all years on the x-axis
    all_years = sorted(set(df_avg_year['tahun'].dropna().tolist() + df_proj['tahun'].dropna().tolist()))
    all_years = sorted(set(all_years))
    
    fig.update_xaxes(
        tickmode='array',
        tickvals=all_years,
        type='category'
    )

    fig.update_yaxes(
    tickformat=',',  # Use comma separator
    tickvals=[x for x in range(0, int(df_avg_year['bpih'].max()*1.2), 5000000)],  # adjust as needed
    ticktext=[f'{int(x/1e6)}jt' for x in range(0, int(df_avg_year['bpih'].max()*1.2), 5000000)])
    
    # Layout
    fig.update_layout(
        title='Prediksi BPIH (Multivariate Linear Regression + Proyeksi Komponen)',
        xaxis_title='Tahun',
        yaxis_title='BPIH (Rupiah)',
        legend_title='Keterangan',
        template='plotly_white'
    )
    
    st.plotly_chart(fig, use_container_width=True, height=200)

    # Group by year, take mean of bipih and nm
    df["tahun"] = df["tahun"].astype(str)
    df_grouped = df.groupby("tahun")[["bipih", "nm"]].mean().reset_index()

    # Optional: convert values to millions for readability
    df_grouped["bipih_mio"] = df_grouped["bipih"] / 1e6
    df_grouped["nm_mio"] = df_grouped["nm"] / 1e6
    df_grouped["tahun"] = df_grouped["tahun"].astype(str)
    df_grouped["total_mio"] = df_grouped["bipih_mio"] + df_grouped["nm_mio"]
    
    fig = go.Figure()
    
    # NM bar
    fig.add_trace(go.Bar(
        x=df_grouped["tahun"],
        y=df_grouped["nm_mio"],
        name="NM",
        text=[f'{x:.2f} jt' for x in df_grouped["nm_mio"]],
        textposition='auto',
        textangle=0,
        textfont=dict(size=10, color="white"),
        marker_color="#e07b39"
    ))
    
    # Bipih bar
    fig.add_trace(go.Bar(
        x=df_grouped["tahun"],
        y=df_grouped["bipih_mio"],
        name="Bipih",
        text=[f'{x:.2f} jt' for x in df_grouped["bipih_mio"]],
        textposition='inside',  textangle=0,
        marker_color="#4a8db7"
    ))
    
    # Total label outside (on top of full stacked bar)
    fig.add_trace(go.Scatter(
        x=df_grouped["tahun"],
        y=df_grouped["total_mio"] + 2,  # Shift label above bar
        mode='text',
        text=[f'{x:.2f} jt' for x in df_grouped["total_mio"]],
        textfont=dict(size=10, color="black"),
        showlegend=False
    ))
    
    fig.update_layout(
        barmode='stack',
        title=dict(
            text="Komponen BPIH (Dalam Juta)",
            x=0.5,
            xanchor='center',
            font=dict(size=18)
        ),
        xaxis=dict(
            title="Tahun",
            tickmode='linear'
        ),
        yaxis_title="Rata-rata (Jutaan Rp)",
        legend=dict(
            orientation='h',
            yanchor='bottom',
            y=1.05,
            xanchor='center',
            x=0.5,
            title=None
        ),
        template="seaborn"
    )
    
    st.plotly_chart(fig, use_container_width=True, height=200)
